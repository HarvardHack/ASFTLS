ADVANCED STATISTICS FOR THE LIFE SCIENCES

WEEK 4 homework 6

question 4.1.1.  0.3747001

dbinom(2,4,0.49)


question 4.1.2

0.2130221
dbinom(4,10,0.49)

0.1275212
1-pbinom(10,20,0.4)

0.6599363
1 - dbinom(0, 189000000, 1/175223510)

0.293136
1 - pbinom(1, 189000000, 1/175223510)


question 4.1.3

0.3394443
pbinom(9,20,0.4)-pbinom(7,20,0.4)

0.3519231
b <- (9 - 20*.4)/sqrt(20*.4*.6)
a <- (7 - 20*.4)/sqrt(20*.4*.6)
pnorm(b)-pnorm(a)


question 4.1.4  9.728752e-06

exact = pbinom(450,1000,0.4)-pbinom(350,1000,0.4)
b <- (450 - 1000*.4)/sqrt(1000*.4*.6)
a <- (350 - 1000*.4)/sqrt(1000*.4*.6)
approx <- pnorm(b)-pnorm(a)
abs(exact-approx)


question 4.1.5

When N is 100 all approximations are spot on

Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
library(rafalib)
mypar2(4,5)
for(N in Ns){
  ks <- 1:(N-1)
  for(p in ps){
    exact = dbinom(ks,N,p)
    a = (ks+0.5 - N*p)/sqrt(N*p*(1-p))
    b = (ks-0.5 - N*p)/sqrt(N*p*(1-p))
    approx = pnorm(a) - pnorm(b)
    LIM <- range(c(approx,exact))
    plot(exact,approx,main=paste("N =",N," p = ",p),xlim=LIM,ylim=LIM,col=1,pch=16)
    abline(0,1)
  }
}


question 4.1.6  0.293136

N = 189000000
p = 1/175223510
1 - ppois(1, N*p)

question 4.2.1  5.167224

loglikelihood = function(lambda,x){
  sum(dpois(x,lambda,log=TRUE))
}
lambdas = seq(1,15,len=300)
l = sapply(lambdas,function(lambda) loglikelihood(lambda,counts))
plot(lambdas,l)
mle=lambdas[which.max(l)]
abline(v=mle)
print(mle) 

mean(counts)

question 4.2.2 

94000
binLocation[which.max(counts)]

14
max(counts)


question 4.2.3   

0.00069799

pval = 1 - ppois(13,lambda)
print(pval)

We selected the highest region out of 57 and need to adjust for multiple testing.


question 4.2.4   0.00087719

0.05/57


question 4.2.5 

Poisson is a very good approximation except for one point that we actually think is associated with a region of interest. 


question 4.3.1  The normal distribution is not a useful approximation here: the left tail is over estimated and the right tail is underestimated. 

library(genefilter)
s2 <- rowVars(y)
library(rafalib)
mypar(1,2)
qqnorm(s2)
qqline(s2)
##To see the square root transformation does not help much:
qqnorm(sqrt(s2))
qqline(sqrt(s2))


question 4.3.2.

0.03125834

library(limma)
estimates=fitFDist(s2,14)
print( estimates$scale )

If we exclude the genes with the highest variances (top 5%), the F-distribution provides a good fit

ps <- (seq(along=s2)-0.5)/length(s2)
theoretical<- qf(ps,14,estimates$df2)*estimates$scale 
LIM <- sqrt( range(c(theoretical,s2)) )
mypar(1,2)
qqplot(sqrt( theoretical ), sqrt( s2 ),ylim=LIM,xlim=LIM)
abline(0,1)
##close up excluding the upper 5%
K <- sqrt( quantile(s2,0.95) )
qqplot( sqrt( theoretical ), sqrt( s2 ),ylim=c(0,K),xlim=c(0,K))
abline(0,1)




##WEEK 4 homework 7

q. 4.4.1  0.02415813

(0.99*0.00025)/[(0.99*0.00025)+(0.01*0.99975)]


q. 4.5.1  filter(players,yearID==2012) %>% mutate(AVG=H/AB) %>% filter(AB>=500) %>% select(AVG) 


q.  4.5.2

0.2753465

dat <- filter(players,yearID>=2010, yearID <=2012) %>% mutate(AVG=H/AB) %>% filter(AB>500) %>% select(AVG)

mean(dat$AVG) 


0.02741713

sd(dat$AVG)

Normal


q. 4.5.3  0.111243

sqrt(.45*(1-.45)/20)


q. 4.5.4 0.2849443

0.275+(1-0.943)*(0.450-0.260)


q. 4.6.1   0.7608696

library(genefilter)
rtt = rowttests(y,g)
index = rtt$p.value < 0.01 
print (mean( !spike[index] ))
## We can make a volcano plot to visualize this:
mask <- with(rtt, abs(dm) < .2 & p.value < .01)
cols <- ifelse(mask,"red",ifelse(spike,"dodgerblue","black"))
with(rtt,plot(-dm, -log10(p.value), cex=.8, pch=16,
     xlim=c(-1,1), ylim=c(0,5),
     xlab="difference in means",
     col=cols))
abline(h=2,v=c(-.2,.2), lty=2)


q. 4.6.2  The false positives have smaller standard deviation. 
library(genefilter)
sds <- rowSds(y[,g==0])
index <- paste0( as.numeric(spike), as.numeric(rtt$p.value<0.01))
index <- factor(index,levels=c("11","01","00","10"),labels=c("TP","FP","TN","FN"))
boxplot(split(sds,index))


q. 4.6.3  Moves all the estimates of standard deviation closer to 0.12.

LIM = range( c(posteriorSD,sampleSD))
plot(sampleSD, posteriorSD,ylim=LIM,xlim=LIM)
abline(0,1)
abline(v=sqrt(fit$s2.prior))


q. 4.6.4   0.6486486

index = pvals < 0.01 
print (mean( !spike[index] ))
## We can make a volcano plot to visualize this:
mask <- abs(fit$coef[,2]) < .2 & fit$p.value[,2] < .01
cols <- ifelse(mask,"red",ifelse(spike,"dodgerblue","black"))
plot(fit$coef[,2], -log10(fit$p.value[,2]), cex=.8, pch=16,
     xlim=c(-1,1), ylim=c(0,5),
     xlab="difference in means",
     col=cols)
abline(h=2,v=c(-.2,.2), lty=2)
